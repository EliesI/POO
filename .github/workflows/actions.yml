name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    if: github.event_name == ('push' || 'pull_request') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

# Prendre un autre tuto
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: musubi42
          password: ôg»¤Æ³ÇÅA!çûp#D9oÑ@Ó§
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta-api
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: musubi42/poogerapi

      - name: Extract metadata (tags, labels) for Docker
        id: meta-front
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: musubi42/poogerfront
        
      - name: Build and push API
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Front
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./tm-front
          file: ./tm-front/Dockerfile
          push: true
          tags: ${{ steps.meta-front.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


#   check-branch-name:

# on: pull_request
#   name: Git checks
#   jobs:
#   check-branch-name:
#     name: Check branch name
#     runs-on: ubuntu-20.04
#     steps:
#       - uses: actions/checkout@v1
#       - name: Check branch name respects naming conventions
#         id: branchnamecheck
#         if: github.base_ref == 'main'
#         run: |
#           echo "base ref is main checking branch name..."
#           ALLOWED_PREFIXES="feature feat fix hotfix release chore dependabot docs test refactor"
#           BRANCH_NAME_VALID=false
#           PREFIXES_ARRAY=$(echo $ALLOWED_PREFIXES | tr " " "\n")
#           for PREFIX in $PREFIXES_ARRAY ; 
#           do 
#           if [[ "${{ github.head_ref }}" == $PREFIX/* ]]; then
#               echo "${{ github.head_ref }} respects prefix $PREFIX"
#               BRANCH_NAME_VALID=true
#           else
#               echo "${{ github.head_ref }} DOES NOT respects prefix $PREFIX"
#           fi
#           done
#           if [[ $BRANCH_NAME_VALID == true ]]; then
#               echo "[SUCCESS] - Your branch name respect the naming convention"  
#           else
#               echo "[FAIL] - Branch ${{ github.head_ref }} does not respect the naming convention, please rename"  
#               exit 1
#           fi
# #   check-commit-name:
# #     name: Check commit(s)
# #     runs-on: ubuntu-20.04
# #     steps:
# #       - uses: actions/checkout@v1
# #       - name: Check commit name
# #         id: checkcommitname
# #         if: github.base_ref == 'main'
# #         run: |
# #           echo "base ref is main checking commit(s) name..."
# #           count=$(git rev-list --count origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
# #           ALLOWED_PREFIXES="feat fix docs style refactor test chore"
# #           PREFIXES_ARRAY=$(echo $ALLOWED_PREFIXES | tr " " "\n")
# #           ALL_COMMIT_NAME_VALID=true
# #           if [ $count == 0 ]; then
# #             ALL_COMMIT_NAME_VALID=false
# #           else
# #             echo "Checking last commit"
# #             message=$(git log -1 --format=%s origin/${{ github.head_ref }})
# #             COMMIT_NAME_VALID=false
# #             for PREFIX in $PREFIXES_ARRAY ; 
# #             do 
# #             if [[ "$message" == $PREFIX\(*\):\ * ]]; then
# #                 COMMIT_NAME_VALID=true
# #                 echo "$message respects prefix $PREFIX"
# #             else
# #                 echo "$message DOES NOT respects prefix $PREFIX"
# #             fi
# #             done
# #             if [[ $COMMIT_NAME_VALID == false ]]; then
# #                 ALL_COMMIT_NAME_VALID=false
# #             fi
# #           fi
# #           if [[ $ALL_COMMIT_NAME_VALID == true ]]; then
# #               echo "[SUCCESS] - All your commit(s) respect the naming convention"  
# #           else
# #               echo "[FAIL] - At least one commit message does not respect the naming convention, please rename"  
# #               exit 1
# #           fi
#   up-to-date:
#     name: Check branch up to date
#     runs-on: ubuntu-20.04
#     steps:
#       - uses: actions/checkout@v1
#       - name: Check up to date
#         id: checkuptodate
#         if: github.base_ref == 'main'
#         run: |
#           echo "base ref is main checking if branch is up to date..."
#           count=$(git rev-list --count origin/${{ github.head_ref }}..origin/${{ github.base_ref }})
#           if [ $count == 0 ]; then
#             echo "[SUCCESS] - Your branch is up to date"  
#           else
#             echo "[FAIL] - your branch is $count commits late. Please rebase."  
#             exit 1
#           fi